# This workflow has been replaced by:
# - deploy-complete.yml (recommended for single workflow)
# - deploy-after-terraform.yml (for automatic chaining)
# 
# Rename this file back to .yml to re-enable

name: Deploy to AWS Fargate (Simple)

on:
  push:
    branches: [main, master]
    paths-ignore:
      - 'terraform/**'
      - 'README.md'
      - '.gitignore'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: miniurl
  ECS_SERVICE: miniurl-service
  ECS_CLUSTER: miniurl-cluster
  ECS_TASK_DEFINITION: miniurl-task

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Docker image built and pushed successfully"

    - name: Download current task definition
      run: |
        echo "Downloading current task definition..."
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECR_REPOSITORY }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "Waiting for service to be stable..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE
        
        echo "‚úÖ Deployment completed successfully"

    - name: Get Load Balancer URL
      run: |
        echo "Getting Load Balancer DNS name..."
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names miniurl-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text 2>/dev/null || echo "ALB not found")
        
        if [ "$ALB_DNS" != "ALB not found" ]; then
          echo "üåê Application URL: http://$ALB_DNS"
        else
          echo "‚ÑπÔ∏è ALB not created yet. Run Terraform first."
        fi 