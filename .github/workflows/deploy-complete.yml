name: Complete Deployment (Infrastructure + Application)

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy
      skip_app_deploy:
        description: 'Skip application deployment'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0
  TF_VAR_aws_region: us-east-1
  TF_VAR_project_name: miniurl
  TF_VAR_environment: prod
  TF_VAR_container_port: 3000
  ECR_REPOSITORY: miniurl
  ECS_SERVICE: miniurl-service
  ECS_CLUSTER: miniurl-cluster
  ECS_TASK_DEFINITION: miniurl-task

jobs:
  # Job 1: Deploy Infrastructure with Terraform
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    defaults:
      run:
        working-directory: terraform

    outputs:
      terraform_outcome: ${{ steps.apply.outcome }}
      load_balancer_url: ${{ steps.outputs.outputs.load_balancer_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        echo "🔧 Initializing Terraform..."
        terraform init
        echo "✅ Terraform initialized successfully"

    - name: Terraform Format Check
      run: |
        echo "🎨 Checking Terraform formatting..."
        terraform fmt -check
        echo "✅ Terraform format check passed"

    - name: Terraform Validate
      run: |
        echo "🔍 Validating Terraform configuration..."
        terraform validate
        echo "✅ Terraform validation passed"

    - name: Terraform Plan
      id: plan
      run: |
        echo "📋 Running Terraform plan..."
        terraform plan -no-color -out=tfplan
        echo "✅ Terraform plan completed"

    - name: Terraform Apply
      id: apply
      if: github.event.inputs.terraform_action != 'plan' && github.event.inputs.terraform_action != 'destroy'
      run: |
        echo "🚀 Applying Terraform configuration..."
        terraform apply -auto-approve tfplan
        echo "✅ Infrastructure deployed successfully"

    - name: Terraform Destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        echo "⚠️ WARNING: Destroying infrastructure..."
        terraform destroy -auto-approve
        echo "🗑️ Infrastructure destroyed"

    - name: Get Terraform Outputs
      id: outputs
      if: steps.apply.outcome == 'success'
      run: |
        echo "📋 Getting Terraform outputs..."
        load_balancer_url=$(terraform output -raw load_balancer_url 2>/dev/null || echo "")
        echo "load_balancer_url=$load_balancer_url" >> $GITHUB_OUTPUT
        
        echo "🌐 Infrastructure Details:"
        terraform output -json || echo "No outputs available"

  # Job 2: Deploy Application (depends on terraform)
  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    # Only run if terraform succeeded and we're not destroying or skipping app deploy
    if: needs.terraform.outputs.terraform_outcome == 'success' && github.event.inputs.terraform_action != 'destroy' && github.event.inputs.skip_app_deploy != true
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Docker image..."
        
        # Try with original Dockerfile first, fallback to simple version
        if docker buildx build \
          --platform linux/amd64 \
          --push \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          . ; then
          echo "✅ Build successful with original Dockerfile"
        else
          echo "⚠️ Original Dockerfile failed, trying simplified version..."
          mv Dockerfile Dockerfile.original
          mv Dockerfile.simple Dockerfile
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          echo "✅ Build successful with simplified Dockerfile"
        fi
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "✅ Docker image built and pushed successfully"

    - name: Download current task definition
      run: |
        echo "📥 Downloading current ECS task definition..."
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json
        echo "✅ Task definition downloaded"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECR_REPOSITORY }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "⏳ Waiting for service to be stable..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE
        
        echo "📊 Getting service status..."
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].{TaskDefinition:taskDefinition,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount}'
        
        echo "✅ Application deployment completed successfully"

    - name: Get Application URL
      run: |
        echo "🌐 Getting application URL..."
        if [ -n "${{ needs.terraform.outputs.load_balancer_url }}" ]; then
          echo "🎉 Application URL: ${{ needs.terraform.outputs.load_balancer_url }}"
          echo "📊 Health Check: ${{ needs.terraform.outputs.load_balancer_url }}/health"
        else
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names miniurl-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
            echo "🎉 Application URL: http://$ALB_DNS"
            echo "📊 Health Check: http://$ALB_DNS/health"
          else
            echo "⚠️ Unable to determine application URL. Check AWS console."
          fi
        fi

  # Job 3: Deployment Summary
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [terraform, deploy-app]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.terraform.result }}" == "success" ]; then
          echo "✅ **Infrastructure**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Infrastructure**: Failed or skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-app.result }}" == "success" ]; then
          echo "✅ **Application**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ needs.terraform.outputs.load_balancer_url }}" ]; then
            echo "🌐 **URL**: ${{ needs.terraform.outputs.load_balancer_url }}" >> $GITHUB_STEP_SUMMARY
          fi
        elif [ "${{ needs.deploy-app.result }}" == "skipped" ]; then
          echo "⏭️ **Application**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Application**: Failed" >> $GITHUB_STEP_SUMMARY
        fi 